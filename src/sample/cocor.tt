<#@ template language="C#" hostspecific="True" #>
<#@ output extension="log" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="$(SolutionDir)\..\bin\Release\cocor.exe" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.VisualStudio.OLE.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="Microsoft.VisualStudio.Shell" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Prabir.Cocor" #>

<#
	Cocor();
	DeleteOldOutputs();
#>

<#+

	void Cocor()
	{

		var owp = GetOutputWindowPane("Coco/R");
		T4LogWriter logWriter = new T4LogWriter(this,owp);

		string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
		var files = Directory.GetFiles(templateDirectory);

		var atgFiles = new List<string>();
		foreach(var file in files)
		{
			var atg = Path.GetFileName(file);
			var ext = Path.GetExtension(atg);
			if(ext.Equals(".atg", StringComparison.OrdinalIgnoreCase))
				atgFiles.Add(atg);
		}

		foreach(var atgFile in atgFiles)
		{
			var f = Path.GetFileNameWithoutExtension(atgFile);
		
			var scannerFile = Path.Combine(templateDirectory, f + ".Scanner.cs");
			var parserFile = Path.Combine(templateDirectory, f + ".Parser.cs");
			
			if(File.Exists(scannerFile))
				File.Delete(scannerFile);
			if(File.Exists(parserFile))
				File.Delete(parserFile);

			Cocor(atgFile, logWriter);
		}
	}

	// coco/r specific methods
	void Cocor(string file, T4LogWriter logWriter){
		string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string filePath = Path.Combine(templateDirectory, file);
		
		logWriter.WriteLine("Processing file \"" + filePath+"\"");
		logWriter.WriteLine("cocor "+ Path.GetFileName(filePath));
		logWriter.WriteLine("Started at " + DateTime.Now );
		logWriter.WriteLine("------------------- Console Output ----------------------------");
		CocorGenerator.Generate(CocorGenerator.CocorProvider.Prabir, logWriter, new[] {filePath});

		string fileWithoutExtension = Path.GetFileNameWithoutExtension(filePath);
		
		AttachFile(fileWithoutExtension+".Scanner.cs");
		AttachFile(fileWithoutExtension+".Scanner.cs.old");
		AttachFile(fileWithoutExtension+".Parser.cs");
		AttachFile(fileWithoutExtension+".Parser.cs.old");
		
		logWriter.WriteLine("---------------- End of Console Output ------------------------");
		logWriter.WriteLine("Finsihed at " + DateTime.Now );
		logWriter.WriteLine("===============================================================");
		logWriter.WriteLine(string.Empty);
		logWriter.WriteLine(string.Empty);
	}

	class T4LogWriter : TextWriter {

		TextTransformation _tt;
		EnvDTE.OutputWindowPane _owp;

		public T4LogWriter(TextTransformation tt, EnvDTE.OutputWindowPane outputPane)
		{
			_tt = tt;
			_owp = outputPane;
		}
		
		public override void WriteLine(string format, object arg0, object arg1, object arg2)
        {
            this.WriteLine(string.Format(format, arg0, arg1, arg2));
        }

        public override void WriteLine(string value)
        {
			_tt.WriteLine(value);
			_owp.OutputString(value);
			_owp.OutputString(Environment.NewLine);
        }
		
		public override System.Text.Encoding Encoding
        {
            get { return System.Text.Encoding.ASCII; }
        }
	}
	
    List<string> __savedOutputs = new List<string>();
    Engine __engine = new Engine();
	
	void AttachFile(string outputFileName)
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();

		if(File.Exists(outputFilePath))
		{
			templateProjectItem.ProjectItems.AddFromFile(outputFilePath);
			__savedOutputs.Add(outputFileName);
		}
    }

	void RemoveFile(string outputFileName)
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
		foreach(EnvDTE.ProjectItem i in templateProjectItem.ProjectItems){
			if(i.Name == outputFileName){
				i.Delete();
				return; // end the loop once found
			}
		}
    }

	void DeleteOldOutputs()
	{
		EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
		foreach (EnvDTE.ProjectItem childProjectItem in templateProjectItem.ProjectItems)
		{
			if (!__savedOutputs.Contains(childProjectItem.Name))
				childProjectItem.Delete();
		}
	} 

    EnvDTE.ProjectItem __getTemplateProjectItem()
    {
        EnvDTE.Project dteProject = __getTemplateProject();

        IVsProject vsProject = __dteProjectToVsProject(dteProject);

        int iFound = 0;
        uint itemId = 0;
        VSDOCUMENTPRIORITY[] pdwPriority = new VSDOCUMENTPRIORITY[1];
        int result = vsProject.IsDocumentInProject(Host.TemplateFile, out iFound, pdwPriority, out itemId);
        if (result != VSConstants.S_OK)
            throw new Exception("Unexpected error calling IVsProject.IsDocumentInProject");
        if (iFound == 0)
            throw new Exception("Cannot retrieve ProjectItem for template file");
        if (itemId == 0)
            throw new Exception("Cannot retrieve ProjectItem for template file");

        Microsoft.VisualStudio.OLE.Interop.IServiceProvider itemContext = null;
        result = vsProject.GetItemContext(itemId, out itemContext);
        if (result != VSConstants.S_OK)
            throw new Exception("Unexpected error calling IVsProject.GetItemContext");
        if (itemContext == null)
            throw new Exception("IVsProject.GetItemContext returned null");
    
        ServiceProvider itemContextService = new ServiceProvider(itemContext);
        EnvDTE.ProjectItem templateItem = (EnvDTE.ProjectItem)itemContextService.GetService(typeof(EnvDTE.ProjectItem));
        Debug.Assert(templateItem != null, "itemContextService.GetService returned null");

        return templateItem;
    }

    EnvDTE.Project __getTemplateProject()
    {
        IServiceProvider hostServiceProvider = (IServiceProvider)Host;
        if (hostServiceProvider == null)
            throw new Exception("Host property returned unexpected value (null)");

        EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
        if (dte == null)
            throw new Exception("Unable to retrieve EnvDTE.DTE");

        Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
        if (activeSolutionProjects == null)
            throw new Exception("DTE.ActiveSolutionProjects returned null");

        EnvDTE.Project dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
        if (dteProject == null)
            throw new Exception("DTE.ActiveSolutionProjects[0] returned null");

        return dteProject;
    }

    static IVsProject __dteProjectToVsProject(EnvDTE.Project project)
    {
        if (project == null) 
            throw new ArgumentNullException("project");
            
        string projectGuid = null;        

        // DTE does not expose the project GUID that exists at in the msbuild project file.        
        // Cannot use MSBuild object model because it uses a static instance of the Engine,         
        // and using the Project will cause it to be unloaded from the engine when the         
        // GC collects the variable that we declare.       
        using (XmlReader projectReader = XmlReader.Create(project.FileName))
        {
            projectReader.MoveToContent();
            object nodeName = projectReader.NameTable.Add("ProjectGuid");
            while (projectReader.Read())
            {
                if (Object.Equals(projectReader.LocalName, nodeName))
                {
                    projectGuid = (string)projectReader.ReadElementContentAsString(); 
                    break;
                }
            }
        }
        if (string.IsNullOrEmpty(projectGuid))
            throw new Exception("Unable to find ProjectGuid element in the project file");

        Microsoft.VisualStudio.OLE.Interop.IServiceProvider dteServiceProvider = 
            (Microsoft.VisualStudio.OLE.Interop.IServiceProvider)project.DTE;
        IServiceProvider serviceProvider = new ServiceProvider(dteServiceProvider); 
        IVsHierarchy vsHierarchy = VsShellUtilities.GetHierarchy(serviceProvider, new Guid(projectGuid));
            
        IVsProject vsProject = (IVsProject)vsHierarchy;
        if (vsProject == null)
            throw new ArgumentException("Project is not a VS project.");
        return vsProject;
    }


	EnvDTE.OutputWindowPane GetOutputWindowPane(string paneName)
	{
		var dte = __getTemplateProjectItem().DTE;

		EnvDTE.Window win = dte.Windows.Item(EnvDTE.Constants.vsWindowKindOutput);
        EnvDTE.OutputWindow OW = (EnvDTE.OutputWindow)win.Object;

		EnvDTE.OutputWindowPane OWp = null;

            for (int i = 1; i <= OW.OutputWindowPanes.Count; i++)
            {
                if (OW.OutputWindowPanes.Item(i).Name == paneName)
                {
                    OWp = OW.OutputWindowPanes.Item(i);
                    OWp.Clear();
                }
            }

            if (OWp == null)
                OWp = OW.OutputWindowPanes.Add(paneName);

            // OWp.Activate();

            return OWp;
	}

#>